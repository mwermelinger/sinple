(set(), set())
Help on module sinple:

NAME
    sinple - SImple Network Python Library for Education (SINPLE)

DESCRIPTION
    Michel Wermelinger
    
    Many systems can be represented as networks, e.g. transport connections,
    gene regulation, social interactions, the World Wide Web.
    [Network science](http://en.wikipedia.org/wiki/Network_science) is an
    important field to analyse and predict the behaviour of such systems.
    
    SINPLE does *not* support analysis of large networks;
    there are various state-of-the-art libraries for that.
    Instead SINPLE's aims are pedagogical:
    
    - it illustrates basic Python constructs: loops, functions, tuples, sets, etc;
    - it illustrates simple forms of
    [unit testing](http://en.wikipedia.org/wiki/Unit_testing) and
    [preconditions](http://en.wikipedia.org/wiki/Precondition) using assertions;
    - it explains basic network concepts through executable definitions
    (the functions) and concrete examples (the unit tests);
    - it includes small exercises and larger projects;
    - it is extensively documented in a simple [literate
    programming](http://en.wikipedia.org/wiki/Literate_programming) style.
    
    SINPLE is written for Python 3.
    
    Running [Pycco](http://fitzgen.github.io/pycco/) on the source code
    (`pycco -d . sinple.py`) generates `sinple.html`,
    a side-by-side view of documentation and code.
    
    The latest version of SINPLE can be found on http://tiny.cc/sinple.

FUNCTIONS
    add_edges(edgeset, graph)
        Add a set of edges and their endpoints to a graph to create a new graph.
    
    adjacent(node1, node2, graph)
        Two nodes are **adjacent** if an edge connects them.
    
    clustering_coefficient(node, graph)
        Return the node's **local clustering coefficient**.
        
        It is the density of its neighbourhood.
    
    components(graph)
        A **component** is a maximal connected subgraph.
        
        Return a list of the graph's components, in no particular order.
    
    connected(graph)
        A network is **connected** if every node is reachable from any node.
    
    degree(node, graph)
        A node's **degree** is the number of incident edge tips.
        
        Loops count twice, so that each edge contributes 2 to the degree sum.
    
    degree_distribution(graph)
        Return a list of length order(graph)+2 of a node's degree probabilities.
        
        The n-th element is the probability of a node having degree n.
    
    degree_sequence(graph)
        A graph's **degree sequence** is a descending list of nodes' degrees.
    
    delete_edges(edgeset, graph)
        Remove a set of edges from a graph to create a new graph.
    
    density(graph)
        A graph's **density** is the ratio of its actual and potential edges:
        it's its size divided by the size of a complete graph of the same order.
        The density of an empty graph is set to zero.
    
    diameter(graph)
        A graph's **diameter** is the longest of all pairwise distances.
    
    distance(node1, node2, graph)
        The **distance** is the length of the shortest path from node1 to node2.
        
        The length of a path is the number of its edges.
        If there's no path, the distance is infinite.
    
    edge(node1, node2)
        Create an edge connecting the two nodes.
    
    edges(graph)
        Return the set of the graph's edges
    
    endpoints(edge)
        Return the edge's **endpoints**, i.e. the set of nodes it connects.
    
    giant_component(graph)
        A **giant component** is a component with the majority of nodes.
        
        Return the giant component if there is one, otherwise None.
    
    incident(edge, node)
        An edge is **incident** to the nodes it connects, and vice-versa.
    
    is_loop(edge)
        An edge is a **loop** if it connects a node to itself.
    
    isolated(node, graph)
        A node is **isolated** if it is not incident to any edge.
    
    k_regular(graph)
        A graph is **k-regular** if all its nodes have degree k.
        
        Return k if the graph is k-regular, otherwise return -1.
    
    mean_degree(graph)
        Return a graph's average degree.
    
    neighbourhood(node, graph)
        The **neighbourhood** of a node is the set of its adjacent nodes.
    
    network(edgeset, nodeset=set())
        Create a network from the given sets of edges and nodes.
        
        All nodes incident to the given edges are automatically added.
    
    nodes(graph)
        Return the set of the graph's nodes.
    
    null(n)
        Return the **null graph** with nodes numbered 1 to *n* and no edges.
    
    order(graph)
        The graph's **order** is the number of its nodes.
    
    random(n, p)
        Return a simple **random graph** with n nodes and edge probability p.
    
    shortest_path(node1, node2, graph)
        Return the first shortest path found between the two nodes.
        
        A **path** is a sequence of nodes n_1, n_2, ... with n_i adjacent to n_i+1.
        If there is no path, return `[]`, otherwise return `[node1, ..., node2]`.
        Return `[node1]` if node1 and node2 are the same.
    
    simple(graph)
        A graph is **simple** if it has no loops.
    
    size(graph)
        The graph's **size** is the number of its edges.
    
    subgraph(nodeset, graph)
        Return the graph's **subgraph induced** by nodeset.
        
        It includes those edges of graph that connect nodeset.

DATA
    ARPANET = (set(['BBN', 'CASE', 'Carnegie', 'Harvard', 'Lincoln', 'MIT'...
    C3 = (set([1, 2, 3]), set([frozenset([1, 3]), frozenset([1, 2]), froze...
    C4 = (set([1, 2, 3, 4]), set([frozenset([1, 2]), frozenset([3, 4]), fr...
    C5 = (set([1, 2, 3, 4, 5]), set([frozenset([1, 2]), frozenset([3, 4]),...
    EMPTY = (set([]), set([]))
    K2 = (set([1, 2]), set([frozenset([1, 2])]))
    K3 = (set([1, 2, 3]), set([frozenset([1, 3]), frozenset([1, 2]), froze...
    LOOP = (set([1]), set([frozenset([1])]))
    N1 = (set([1]), set([]))
    N2 = (set([1, 2]), set([]))
    PETERSEN = (set([1, 2, 3, 4, 5, 6, ...]), set([frozenset([2, 7]), froz...

FILE
    /Users/mw4687/Dropbox/teaching/sinple/sinple.py


